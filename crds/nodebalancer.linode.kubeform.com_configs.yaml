apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: linode.kubeform.com
    app.kubernetes.io/part-of: kubeform.com
  name: configs.nodebalancer.linode.kubeform.com
spec:
  group: nodebalancer.linode.kubeform.com
  names:
    kind: Config
    listKind: ConfigList
    plural: configs
    singular: config
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              providerRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              resource:
                properties:
                  algorithm:
                    description: 'What algorithm this NodeBalancer should use for
                      routing traffic to backends: roundrobin, leastconn, source'
                    type: string
                  check:
                    description: The type of check to perform against backends to
                      ensure they are serving requests. This is used to determine
                      if backends are up or down. If none no check is performed. connection
                      requires only a connection to the backend to succeed. http and
                      http_body rely on the backend serving HTTP, and that the response
                      returned matches what is expected.
                    type: string
                  checkAttempts:
                    description: How many times to attempt a check before considering
                      a backend to be down. (1-30)
                    format: int64
                    type: integer
                  checkBody:
                    description: This value must be present in the response body of
                      the check in order for it to pass. If this value is not present
                      in the response body of a check request, the backend is considered
                      to be down
                    type: string
                  checkInterval:
                    description: How often, in seconds, to check that backends are
                      up and serving requests.
                    format: int64
                    type: integer
                  checkPassive:
                    description: If true, any response from this backend with a 5xx
                      status code will be enough for it to be considered unhealthy
                      and taken out of rotation.
                    type: boolean
                  checkPath:
                    description: The URL path to check on each backend. If the backend
                      does not respond to this request it is considered to be down.
                    type: string
                  checkTimeout:
                    description: How long, in seconds, to wait for a check attempt
                      before considering it failed. (1-30)
                    format: int64
                    type: integer
                  cipherSuite:
                    description: What ciphers to use for SSL connections served by
                      this NodeBalancer. `legacy` is considered insecure and should
                      only be used if necessary.
                    type: string
                  id:
                    type: string
                  nodeStatus:
                    description: A structure containing information about the health
                      of the backends for this port. This information is updated periodically
                      as checks are performed against backends.
                    items:
                      properties:
                        down:
                          description: The number of backends considered to be 'DOWN'
                            and unhealthy. These are not in rotation, and not serving
                            requests.
                          format: int64
                          type: integer
                        up:
                          description: The number of backends considered to be 'UP'
                            and healthy, and that are serving requests.
                          format: int64
                          type: integer
                      type: object
                    type: array
                  nodebalancerID:
                    description: The ID of the NodeBalancer to access.
                    format: int64
                    type: integer
                  port:
                    description: The TCP port this Config is for. These values must
                      be unique across configs on a single NodeBalancer (you can't
                      have two configs for port 80, for example). While some ports
                      imply some protocols, no enforcement is done and you may configure
                      your NodeBalancer however is useful to you. For example, while
                      port 443 is generally used for HTTPS, you do not need SSL configured
                      to have a NodeBalancer listening on port 443.
                    format: int64
                    type: integer
                  protocol:
                    description: The protocol this port is configured to serve. If
                      this is set to https you must include an ssl_cert and an ssl_key.
                    type: string
                  proxyProtocol:
                    description: The version of ProxyProtocol to use for the underlying
                      NodeBalancer. This requires protocol to be `tcp`. Valid values
                      are `none`, `v1`, and `v2`.
                    type: string
                  sslCommonname:
                    description: The read-only common name automatically derived from
                      the SSL certificate assigned to this NodeBalancerConfig. Please
                      refer to this field to verify that the appropriate certificate
                      is assigned to your NodeBalancerConfig.
                    type: string
                  sslFingerprint:
                    description: The read-only fingerprint automatically derived from
                      the SSL certificate assigned to this NodeBalancerConfig. Please
                      refer to this field to verify that the appropriate certificate
                      is assigned to your NodeBalancerConfig.
                    type: string
                  stickiness:
                    description: 'Controls how session stickiness is handled on this
                      port: ''none'', ''table'', ''http_cookie'''
                    type: string
                required:
                - nodebalancerID
                type: object
              secretRef:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              state:
                properties:
                  algorithm:
                    description: 'What algorithm this NodeBalancer should use for
                      routing traffic to backends: roundrobin, leastconn, source'
                    type: string
                  check:
                    description: The type of check to perform against backends to
                      ensure they are serving requests. This is used to determine
                      if backends are up or down. If none no check is performed. connection
                      requires only a connection to the backend to succeed. http and
                      http_body rely on the backend serving HTTP, and that the response
                      returned matches what is expected.
                    type: string
                  checkAttempts:
                    description: How many times to attempt a check before considering
                      a backend to be down. (1-30)
                    format: int64
                    type: integer
                  checkBody:
                    description: This value must be present in the response body of
                      the check in order for it to pass. If this value is not present
                      in the response body of a check request, the backend is considered
                      to be down
                    type: string
                  checkInterval:
                    description: How often, in seconds, to check that backends are
                      up and serving requests.
                    format: int64
                    type: integer
                  checkPassive:
                    description: If true, any response from this backend with a 5xx
                      status code will be enough for it to be considered unhealthy
                      and taken out of rotation.
                    type: boolean
                  checkPath:
                    description: The URL path to check on each backend. If the backend
                      does not respond to this request it is considered to be down.
                    type: string
                  checkTimeout:
                    description: How long, in seconds, to wait for a check attempt
                      before considering it failed. (1-30)
                    format: int64
                    type: integer
                  cipherSuite:
                    description: What ciphers to use for SSL connections served by
                      this NodeBalancer. `legacy` is considered insecure and should
                      only be used if necessary.
                    type: string
                  id:
                    type: string
                  nodeStatus:
                    description: A structure containing information about the health
                      of the backends for this port. This information is updated periodically
                      as checks are performed against backends.
                    items:
                      properties:
                        down:
                          description: The number of backends considered to be 'DOWN'
                            and unhealthy. These are not in rotation, and not serving
                            requests.
                          format: int64
                          type: integer
                        up:
                          description: The number of backends considered to be 'UP'
                            and healthy, and that are serving requests.
                          format: int64
                          type: integer
                      type: object
                    type: array
                  nodebalancerID:
                    description: The ID of the NodeBalancer to access.
                    format: int64
                    type: integer
                  port:
                    description: The TCP port this Config is for. These values must
                      be unique across configs on a single NodeBalancer (you can't
                      have two configs for port 80, for example). While some ports
                      imply some protocols, no enforcement is done and you may configure
                      your NodeBalancer however is useful to you. For example, while
                      port 443 is generally used for HTTPS, you do not need SSL configured
                      to have a NodeBalancer listening on port 443.
                    format: int64
                    type: integer
                  protocol:
                    description: The protocol this port is configured to serve. If
                      this is set to https you must include an ssl_cert and an ssl_key.
                    type: string
                  proxyProtocol:
                    description: The version of ProxyProtocol to use for the underlying
                      NodeBalancer. This requires protocol to be `tcp`. Valid values
                      are `none`, `v1`, and `v2`.
                    type: string
                  sslCommonname:
                    description: The read-only common name automatically derived from
                      the SSL certificate assigned to this NodeBalancerConfig. Please
                      refer to this field to verify that the appropriate certificate
                      is assigned to your NodeBalancerConfig.
                    type: string
                  sslFingerprint:
                    description: The read-only fingerprint automatically derived from
                      the SSL certificate assigned to this NodeBalancerConfig. Please
                      refer to this field to verify that the appropriate certificate
                      is assigned to your NodeBalancerConfig.
                    type: string
                  stickiness:
                    description: 'Controls how session stickiness is handled on this
                      port: ''none'', ''table'', ''http_cookie'''
                    type: string
                required:
                - nodebalancerID
                type: object
              terminationPolicy:
                enum:
                - Delete
                - DoNotTerminate
                type: string
              updatePolicy:
                enum:
                - Destroy
                - DoNotDestroy
                type: string
            required:
            - providerRef
            - resource
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.  If
                        that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    observedGeneration:
                      description: If set, this represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.condition[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: Resource generation, which is updated on mutation by
                  the API Server.
                format: int64
                type: integer
              phase:
                description: Status defines the set of statuses a resource can have.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
