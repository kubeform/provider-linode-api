/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-linode-api/apis/firewall/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FirewallLister helps list Firewalls.
// All objects returned here must be treated as read-only.
type FirewallLister interface {
	// List lists all Firewalls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Firewall, err error)
	// Firewalls returns an object that can list and get Firewalls.
	Firewalls(namespace string) FirewallNamespaceLister
	FirewallListerExpansion
}

// firewallLister implements the FirewallLister interface.
type firewallLister struct {
	indexer cache.Indexer
}

// NewFirewallLister returns a new FirewallLister.
func NewFirewallLister(indexer cache.Indexer) FirewallLister {
	return &firewallLister{indexer: indexer}
}

// List lists all Firewalls in the indexer.
func (s *firewallLister) List(selector labels.Selector) (ret []*v1alpha1.Firewall, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Firewall))
	})
	return ret, err
}

// Firewalls returns an object that can list and get Firewalls.
func (s *firewallLister) Firewalls(namespace string) FirewallNamespaceLister {
	return firewallNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FirewallNamespaceLister helps list and get Firewalls.
// All objects returned here must be treated as read-only.
type FirewallNamespaceLister interface {
	// List lists all Firewalls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Firewall, err error)
	// Get retrieves the Firewall from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Firewall, error)
	FirewallNamespaceListerExpansion
}

// firewallNamespaceLister implements the FirewallNamespaceLister
// interface.
type firewallNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Firewalls in the indexer for a given namespace.
func (s firewallNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Firewall, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Firewall))
	})
	return ret, err
}

// Get retrieves the Firewall from the indexer for a given namespace and name.
func (s firewallNamespaceLister) Get(name string) (*v1alpha1.Firewall, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("firewall"), name)
	}
	return obj.(*v1alpha1.Firewall), nil
}
