/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-linode-api/apis/nodebalancer/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodebalancerLister helps list Nodebalancers.
// All objects returned here must be treated as read-only.
type NodebalancerLister interface {
	// List lists all Nodebalancers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Nodebalancer, err error)
	// Nodebalancers returns an object that can list and get Nodebalancers.
	Nodebalancers(namespace string) NodebalancerNamespaceLister
	NodebalancerListerExpansion
}

// nodebalancerLister implements the NodebalancerLister interface.
type nodebalancerLister struct {
	indexer cache.Indexer
}

// NewNodebalancerLister returns a new NodebalancerLister.
func NewNodebalancerLister(indexer cache.Indexer) NodebalancerLister {
	return &nodebalancerLister{indexer: indexer}
}

// List lists all Nodebalancers in the indexer.
func (s *nodebalancerLister) List(selector labels.Selector) (ret []*v1alpha1.Nodebalancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Nodebalancer))
	})
	return ret, err
}

// Nodebalancers returns an object that can list and get Nodebalancers.
func (s *nodebalancerLister) Nodebalancers(namespace string) NodebalancerNamespaceLister {
	return nodebalancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodebalancerNamespaceLister helps list and get Nodebalancers.
// All objects returned here must be treated as read-only.
type NodebalancerNamespaceLister interface {
	// List lists all Nodebalancers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Nodebalancer, err error)
	// Get retrieves the Nodebalancer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Nodebalancer, error)
	NodebalancerNamespaceListerExpansion
}

// nodebalancerNamespaceLister implements the NodebalancerNamespaceLister
// interface.
type nodebalancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Nodebalancers in the indexer for a given namespace.
func (s nodebalancerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Nodebalancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Nodebalancer))
	})
	return ret, err
}

// Get retrieves the Nodebalancer from the indexer for a given namespace and name.
func (s nodebalancerNamespaceLister) Get(name string) (*v1alpha1.Nodebalancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodebalancer"), name)
	}
	return obj.(*v1alpha1.Nodebalancer), nil
}
