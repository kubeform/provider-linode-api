/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-linode-api/apis/object/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageObjectLister helps list StorageObjects.
// All objects returned here must be treated as read-only.
type StorageObjectLister interface {
	// List lists all StorageObjects in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageObject, err error)
	// StorageObjects returns an object that can list and get StorageObjects.
	StorageObjects(namespace string) StorageObjectNamespaceLister
	StorageObjectListerExpansion
}

// storageObjectLister implements the StorageObjectLister interface.
type storageObjectLister struct {
	indexer cache.Indexer
}

// NewStorageObjectLister returns a new StorageObjectLister.
func NewStorageObjectLister(indexer cache.Indexer) StorageObjectLister {
	return &storageObjectLister{indexer: indexer}
}

// List lists all StorageObjects in the indexer.
func (s *storageObjectLister) List(selector labels.Selector) (ret []*v1alpha1.StorageObject, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageObject))
	})
	return ret, err
}

// StorageObjects returns an object that can list and get StorageObjects.
func (s *storageObjectLister) StorageObjects(namespace string) StorageObjectNamespaceLister {
	return storageObjectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageObjectNamespaceLister helps list and get StorageObjects.
// All objects returned here must be treated as read-only.
type StorageObjectNamespaceLister interface {
	// List lists all StorageObjects in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageObject, err error)
	// Get retrieves the StorageObject from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StorageObject, error)
	StorageObjectNamespaceListerExpansion
}

// storageObjectNamespaceLister implements the StorageObjectNamespaceLister
// interface.
type storageObjectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageObjects in the indexer for a given namespace.
func (s storageObjectNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageObject, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageObject))
	})
	return ret, err
}

// Get retrieves the StorageObject from the indexer for a given namespace and name.
func (s storageObjectNamespaceLister) Get(name string) (*v1alpha1.StorageObject, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storageobject"), name)
	}
	return obj.(*v1alpha1.StorageObject), nil
}
