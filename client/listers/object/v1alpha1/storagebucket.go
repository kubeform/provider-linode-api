/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-linode-api/apis/object/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageBucketLister helps list StorageBuckets.
// All objects returned here must be treated as read-only.
type StorageBucketLister interface {
	// List lists all StorageBuckets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageBucket, err error)
	// StorageBuckets returns an object that can list and get StorageBuckets.
	StorageBuckets(namespace string) StorageBucketNamespaceLister
	StorageBucketListerExpansion
}

// storageBucketLister implements the StorageBucketLister interface.
type storageBucketLister struct {
	indexer cache.Indexer
}

// NewStorageBucketLister returns a new StorageBucketLister.
func NewStorageBucketLister(indexer cache.Indexer) StorageBucketLister {
	return &storageBucketLister{indexer: indexer}
}

// List lists all StorageBuckets in the indexer.
func (s *storageBucketLister) List(selector labels.Selector) (ret []*v1alpha1.StorageBucket, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageBucket))
	})
	return ret, err
}

// StorageBuckets returns an object that can list and get StorageBuckets.
func (s *storageBucketLister) StorageBuckets(namespace string) StorageBucketNamespaceLister {
	return storageBucketNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageBucketNamespaceLister helps list and get StorageBuckets.
// All objects returned here must be treated as read-only.
type StorageBucketNamespaceLister interface {
	// List lists all StorageBuckets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageBucket, err error)
	// Get retrieves the StorageBucket from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StorageBucket, error)
	StorageBucketNamespaceListerExpansion
}

// storageBucketNamespaceLister implements the StorageBucketNamespaceLister
// interface.
type storageBucketNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageBuckets in the indexer for a given namespace.
func (s storageBucketNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageBucket, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageBucket))
	})
	return ret, err
}

// Get retrieves the StorageBucket from the indexer for a given namespace and name.
func (s storageBucketNamespaceLister) Get(name string) (*v1alpha1.StorageBucket, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagebucket"), name)
	}
	return obj.(*v1alpha1.StorageBucket), nil
}
