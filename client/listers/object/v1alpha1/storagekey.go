/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-linode-api/apis/object/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageKeyLister helps list StorageKeys.
// All objects returned here must be treated as read-only.
type StorageKeyLister interface {
	// List lists all StorageKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageKey, err error)
	// StorageKeys returns an object that can list and get StorageKeys.
	StorageKeys(namespace string) StorageKeyNamespaceLister
	StorageKeyListerExpansion
}

// storageKeyLister implements the StorageKeyLister interface.
type storageKeyLister struct {
	indexer cache.Indexer
}

// NewStorageKeyLister returns a new StorageKeyLister.
func NewStorageKeyLister(indexer cache.Indexer) StorageKeyLister {
	return &storageKeyLister{indexer: indexer}
}

// List lists all StorageKeys in the indexer.
func (s *storageKeyLister) List(selector labels.Selector) (ret []*v1alpha1.StorageKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageKey))
	})
	return ret, err
}

// StorageKeys returns an object that can list and get StorageKeys.
func (s *storageKeyLister) StorageKeys(namespace string) StorageKeyNamespaceLister {
	return storageKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageKeyNamespaceLister helps list and get StorageKeys.
// All objects returned here must be treated as read-only.
type StorageKeyNamespaceLister interface {
	// List lists all StorageKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.StorageKey, err error)
	// Get retrieves the StorageKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.StorageKey, error)
	StorageKeyNamespaceListerExpansion
}

// storageKeyNamespaceLister implements the StorageKeyNamespaceLister
// interface.
type storageKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageKeys in the indexer for a given namespace.
func (s storageKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageKey))
	})
	return ret, err
}

// Get retrieves the StorageKey from the indexer for a given namespace and name.
func (s storageKeyNamespaceLister) Get(name string) (*v1alpha1.StorageKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagekey"), name)
	}
	return obj.(*v1alpha1.StorageKey), nil
}
